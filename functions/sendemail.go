package functions

import (
	"fmt"
	"log"
	"os"
	"strconv"

	"gopkg.in/gomail.v2"
)

// SendEmail send an email.
// Parameters:
//   - content: The HTML content of the email. Typically, this would be generated using the GenerateUserActivationContent function.
//   - subject: The subject of the email. A string describing the email's purpose.
//   - to: The email address of the recipient. A string representing a single email address.
//   - cc: A slice of strings containing the email addresses of any CC recipients. Can be nil or an empty slice if there are no CC recipients.
//   - bcc: A slice of strings containing the email addresses of any BCC recipients. Can be nil or an empty slice if there are no BCC recipients.
//
// Returns:
//   - void (The function logs success or failure to the console.).
//
// Usage:
//   - This function is used to send emails. It is often used in conjunction with the GenerateUserActivationContent function to send user activation emails. See the example for a demonstration.
//   - Example:
//     content := GenerateUserActivationContent("user123", "https://example.com/activate/token123").
//     SendEmail(content, "Activate Your Account", "user@example.com", nil, nil).
func SendEmail(content, subject, to string, cc, bcc []string) {
	// Load environment variables for mail server configuration
	mailerUser := os.Getenv("MAILER_USER")
	mailerPassword := os.Getenv("MAILER_PASSWORD")
	mailerHost := os.Getenv("MAILER_HOST")
	mailerPort, parseErr := strconv.Atoi(os.Getenv("MAILER_PORT"))
	if parseErr != nil {
		log.Fatalf("Invalid MAILER_PORT value: %v", parseErr)
	}

	// Set up the mail message
	message := gomail.NewMessage()
	message.SetHeader("From", mailerUser)
	message.SetHeader("To", to)
	if len(cc) > 0 {
		message.SetHeader("Cc", cc...)
	}
	if len(bcc) > 0 {
		message.SetHeader("Bcc", bcc...)
	}
	message.SetHeader("Subject", subject)
	message.SetBody("text/html", content)

	// Set up the SMTP transport
	dialer := gomail.NewDialer(mailerHost, mailerPort, mailerUser, mailerPassword)

	// Send the email
	if err := dialer.DialAndSend(message); err != nil {
		log.Printf("Failed to send email: %v", err)
	} else {
		log.Println("Email sent successfully")
	}
}

// GenerateUserActivationContent generates the HTML email content
func GenerateUserActivationContent(username, activationLink string) string {
	return fmt.Sprintf(`
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<style>
			@import url("https://fonts.googleapis.com/css?family=Roboto");
			body { font-family: "Roboto"; padding: 2rem; }
			.button { padding: 8px 16px; background-color: #0063f7; color: white; border: none; border-radius: 8px; text-decoration: none; }
		</style>
	</head>
	<body>
		<div><img src="https://assets.tagsamurai.com/img/logo-ipsum.png" width="168" /></div>
		<p>Hello %s,</p>
		<p>Please click the button below to activate your account.</p>
		<a href="%s" class="button">Activate Account</a>
		<p>If the button does not working properly, please copy the link below and paste to your browser:</p>
		<a href="%s">%s</a>
		<p>This link will be expired in 24 hours since you received this email.</p>
		<p><small>This is an autogenerated email. Please do not reply this email.</small></p>
	</body>
	</html>`, username, activationLink, activationLink, activationLink)
}
